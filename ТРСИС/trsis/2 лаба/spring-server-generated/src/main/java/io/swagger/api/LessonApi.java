/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Lesson;
import io.swagger.model.Lessons;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-09-13T19:36:10.460669586Z[GMT]")
@Validated
public interface LessonApi {

    @Operation(summary = "Добавить новое занятие", description = "", tags={ "Lessons" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Успешная операция", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Lesson.class)))),
        
        @ApiResponse(responseCode = "400", description = "Неверный формат ввода") })
    @RequestMapping(value = "/Lesson",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<Lesson>> addLesson(@Parameter(in = ParameterIn.DEFAULT, description = "Добавление нового занятие", required=true, schema=@Schema()) @Valid @RequestBody Lesson body);


    @Operation(summary = "Метод удаления занятия", description = "", tags={ "Lessons" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Успешное удаления") })
    @RequestMapping(value = "/Lesson/{num_group}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteLesson(@Parameter(in = ParameterIn.PATH, description = "Номер группы", required=true, schema=@Schema()) @PathVariable("num_group") String numGroup);


    @Operation(summary = "Метод получения расписания", description = "", tags={ "Lessons" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Успешный ответ со списком занятий", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Lessons.class))),
        
        @ApiResponse(responseCode = "404", description = "Страница не найдена") })
    @RequestMapping(value = "/Lesson",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Lesson>> getAllLessons();

}

